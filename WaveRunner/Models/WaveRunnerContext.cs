// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using WaveRunner.Models;
//
//    var waveRunnerContext = WaveRunnerContext.FromJson(jsonString);

namespace WaveRunner.Models
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class WaveRunnerContext
    {
        [JsonProperty("Categories")]
        public List<Category> Categories { get; set; }

        [JsonProperty("AudioFiles")]
        public List<AudioFile> AudioFiles { get; set; }
    }

    public partial class AudioFile
    {
        [JsonProperty("Title")]
        public string Title { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("FilePath")]
        public string FilePath { get; set; }
    }

    public partial class Category
    {
        [JsonProperty("CategoryName")]
        public string CategoryName { get; set; }

        [JsonProperty("CategoryColor")]
        public string CategoryColor { get; set; }
        public List<AudioFile> AudioFiles { get; set; }
    }

    public partial class WaveRunnerContext
    {
        public static WaveRunnerContext FromJson(string json) => JsonConvert.DeserializeObject<WaveRunnerContext>(json, WaveRunner.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this WaveRunnerContext self) => JsonConvert.SerializeObject(self, WaveRunner.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
